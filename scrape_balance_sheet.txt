
# scrape the otcmarkts website and save the results to csv table.
# assuming symbols are stored in a csv file

import requests
from pprint import pprint
import os.path
import json
import pandas
import logging
import sys
import csv
import time
import string
from decimal import Decimal

tbl = str.maketrans({"(":"-",")":"",",":""})

def money(x):
    # parse the dollar values, remove , ()
    if x== "-":
        x=""
        #replace - with empty
    try:
        return x.translate(tbl)
    except:
        if x is not None:
            my_logger.warning(x)
            my_logger.warning("!!cannot extract dollar values")
        return None
        
def fetch_page(symbol):
    ''' fetch one symbol (e.g. ACMT) at a time
    Returns:
      html: a list of rows, where each row is a list of values
    '''
    url = "https://backend.otcmarkets.com/otcapi/company/financials/balance-sheet/"+symbol+"?symbol="+symbol+"&duration=annual"
    #   example: https://backend.otcmarkets.com/internal-otcapi/financials/balance-sheet/ACMT?symbol=ACMT&duration=annual

    rows = []

    try:
        s = json.loads(requests.get(url).text)  
    except e:
        print("Unexpected error:", sys.exc_info()[0])
    
    if not s:
        # sometime we get empty return, because there is no data
        # but strangely, it may use a different API in some cases.
        url = "https://backend.otcmarkets.com/internal-otcapi/financials/balance-sheet/"+symbol+"?symbol="+symbol+"&duration=annual"
      
        try:
            s = json.loads(requests.get(url).text)  
        except e:
            print("Unexpected error:", sys.exc_info()[0])

        if not s:
            # not found
            my_logger.warning(symbol + " --- ")
            return []


    if not isinstance(s,list):
        # or the symbol does not exist error
        # logging.debug("error getting json")
        my_logger.warning(symbol + ":" + s['message'])
    else:
        my_logger.warning(symbol + ": found ")
        try:
            # normal output, but in case something is wrong
            for r in s:
                row = [
                    symbol,
                    r.get("periodEndDate"),
                    money(r.get("cashAndCashEquivalents")),
                    money(r.get("netReceivables")),
                    money(r.get("otherCurrentAssets")),
                    money(r.get("longTermInvestments")),
                    money(r.get("propertyPlantAndEquipment")),
                    money(r.get("otherAssets")),
                    money(r.get("deferredLongTermAssetsCharges")),
                    money(r.get("totalAssets")),
                    money(r.get("accountPayable")),
                    money(r.get("longTermDebt")),
                    money(r.get("otherLiabilitiesWithContingencies")),
                    money(r.get("deferredLongTermLiabilityCharges")),
                    money(r.get("totalLiabilities")),
                    money(r.get("commonStock")),
                    money(r.get("retainedEarnings")),
                    money(r.get("otherStockholderEquity")),
                    money(r.get("totalStockholderEquity")),
                    money(r.get("totalLiablitiesAndStockholderEquity")),
                    money(r.get("netTangibleAssets"))
                    ]
                my_logger.warning(row)
                rows.append(row)
        except Exception as e:
            print(e)
            my_logger.warning(s)
            sys.exit(0)

    return rows


if __name__ == '__main__':

    if len(sys.argv) < 2:
        print('Usage: python scrape-balance-sheet.py inputfile')
        print('The inputfile is a plain text file with each row being a symbol')
        sys.exit(0)

    # verify input symbole file

    if not os.path.exists(sys.argv[1]):
        print("The supplied input file (a csv file of symbols) does not exist!".format(sys.argv[1]))
        exit(1)

    csv_filename = sys.argv[1]
    outfile = ""

    try:
        outfile = os.path.splitext(csv_filename)[0] + "-balance-sheet-results.csv"
    except:
        print("Unexpected file name: {}!".format(csv_filename))
        exit(1)

    if os.path.exists(outfile):
        answer = ""
        while answer not in ['y','n']:
            answer = input("File {} already exists, overwrite? (y/n)".format(outfile)) 
            answer = str(answer).lower()

        if answer=="n":
            exit(0)
             # Python 3
    
    my_logger = logging.getLogger('MyLogger')


    column_names = [
        "symbol",
        "periodEndDate",
        "cashAndCashEquivalents",
        "netReceivables",
        "otherCurrentAssets",
        "longTermInvestments",
        "propertyPlantAndEquipment",
        "otherAssets",
        "deferredLongTermAssetsCharges",
        "totalAssets",
        "accountPayable",
        "longTermDebt",
        "otherLiabilitiesWithContingencies",
        "deferredLongTermLiabilityCharges",
        "totalLiabilities",
        "commonStock",
        "retainedEarnings",
        "otherStockholderEquity",
        "totalStockholderEquity",
        "totalLiablitiesAndStockholderEquity",
        "netTangibleAssets"
        ]

    csv_writer = csv.writer(open(outfile,"w",newline=''))

    csv_writer.writerow(column_names)

    for line in open(csv_filename):
        
        rows = fetch_page(line.strip())
        # write to file
        for row in rows:
            csv_writer.writerow(row)
        # sleep to be polite
        my_logger.warning("\n----------------\n")
        time.sleep(0.25)
