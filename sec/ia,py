data1 = pd.read_table('export.tsv')

data1['STTS_EFCTV_DT'] = pd.to_datetime(data1.STTS_EFCTV_DT)

dct_stts_lvl = {
    'Approved': 5, 
    '120-Day Approval': 5, 
    
    'Holding': 0, 
    'Pending': 0, 
    'Postponed': 0, 
    
    'Terminated': 2, 
    'Voluntary Withdrawal': 2, 
    'Cancelled': 2, 
    'Revoked': 2, 
    'Abandoned': 2, 
    'Denied': 2, 
    'Transitioned to Relying Adviser': 2, 
    'Suspended': 2, 
    'Withdrawn': 2, 
    'Voluntary Postponement': 2}
data1['status_level'] = data1.RGSTN_STTS_DS.replace(dct_stts_lvl)

# generalize the following functions
# the number of non-registered IA from a different database (ERA) might have a similar logic
def reOrgData(inputDf):
    # inputDf must have RGSTN_STTS_DS, FIRM_CRD_NB (CRD number) and STTS_EFCTV_DT from the oracle database
    # RGSTN_STTS_DS is status description, status code should work too
    # FIRM_CRD_NB is firm CRD number. Other unique identifier should work too
    # STTS_EFCTV_DT should be a date so the pd.to_datetime(db_data1.STTS_EFCTV_DT) step is done before this
    
    # 1. Add a 'status_level' column. This will order the status of the same day
    # see dct_stts_lvl and the next code as an example, 
    # changing the values will change the order. 
    # e.g. if cancelled is 2 and approved is 5, then when both occurs on the same day, the final status is approved
    
    # 2. sort inputDf by FIRM_CRD_NB, STTS_EFCTV_DT (oldest to newest), status_level (ascending)
    
    # 3. add a 'temp_status' column, 
    # most important is to change pending/holding to previous status. 
    # e.g. if status is denied, pending, pending, approved, pending, holding, terminated
    # it should become denied, denied, denied, approved, approved, apporoved, teminated.
    # it can be grouped to some degree if wanted, but are not required, 
    # e.g. terminated, withdraw etc can be called non-registered, approve/approve120 can be registered  
    
    # return the temp_status column to be added to the original data, 
    # or return a data with temp_status column added
    return
    
def getRegCount(inputDf, cutOffDate):
    # inputDf is from reOrgData() function.
    # cutOffDate is datetime.date or .datetime.
    
    # 1. keep data of  STTS_EFCTV_DT <= cutOffDate
    
    # 2. keep status with latest STTS_EFCTV_DT date. 
    
    # 3. generate a registered (True/False) column if needed,
    # if temp_status is either approved or approved 120 day, it is registered, otherwise, not registered.
    
    # 3. get a count of unique  FIRM_CRD_NB of regiestered=True
    # or get counts of both True and False
    return

data_reOrg = reOrgData(data1)
registeredCt = {}
for dt in pd.date_range(20180131, 20210531, 'monthend'): 
    registeredCt[dt] = getRegCount(data_reOrg, dt)

# modify the levels and check more.
